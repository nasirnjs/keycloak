

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto

kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
enableServiceLinks: true
commonAnnotations: {}
dnsPolicy: ""
dnsConfig: {}
clusterDomain: cluster.local
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/keycloak
  tag: 24.0.4-debian-12-r0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
auth:
  adminUser: user
  adminPassword: ""
  existingSecret: ""
  passwordSecretKey: ""
  annotations: {}
tls:
  enabled: false
  autoGenerated: false
  existingSecret: ""
  usePem: false
  truststoreFilename: "keycloak.truststore.jks"
  keystoreFilename: "keycloak.keystore.jks"
  keystorePassword: ""
  truststorePassword: ""
  passwordsSecret: ""
spi:
  existingSecret: ""
  truststorePassword: ""
  truststoreFilename: "keycloak-spi.truststore.jks"
  passwordsSecret: ""
  hostnameVerificationPolicy: ""
production: false
proxy: passthrough
httpRelativePath: "/"
configuration: ""
existingConfigmap: ""
extraStartupArgs: ""
enableDefaultInitContainers: true
initdbScripts: {}
initdbScriptsConfigMap: ""
command: []
args: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

replicaCount: 1
revisionHistoryLimitCount: 10
containerPorts:
  http: 8080
  https: 8443
extraContainerPorts: []
statefulsetAnnotations: {}
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
resourcesPreset: "small"
resources: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycleHooks: {}
automountServiceAccountToken: true
hostAliases: []
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podManagementPolicy: Parallel
priorityClassName: ""
schedulerName: ""
terminationGracePeriodSeconds: ""
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []

service:
  type: ClusterIP
  http:
    enabled: true
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  # DEPRECATED service.extraHeadlessPorts will be removed in a future release, please use service.headless.extraPorts instead
  extraHeadlessPorts: []
  headless:
    annotations: {}
    extraPorts: []
ingress:
  enabled: true
  ingressClassName: ""
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: keycloak.local
  path: "{{ .Values.httpRelativePath }}"
  servicePort: http
  annotations: {}
  labels: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
adminIngress:
  enabled: false
  ingressClassName: ""
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: keycloak.local
  path: "{{ .Values.httpRelativePath }}"
  servicePort: http
  annotations: {}
  labels: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  kubeAPIServerPorts: [443, 6443, 8443]
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}
  extraLabels: {}
rbac:
  create: false
  rules: []

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      selectPolicy: Max
      policies: []
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300

metrics:
  enabled: false
  service:
    ports:
      http: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"
    extraPorts: []
  serviceMonitor:
    enabled: false
    port: http
    endpoints:
      - path: '{{ include "keycloak.httpPath" . }}metrics'
      - path: '{{ include "keycloak.httpPath" . }}realms/master/metrics'
    path: ""
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    groups: []

keycloakConfigCli:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 5.12.0-debian-12-r3
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  command: []
  args: []
  automountServiceAccountToken: true
  hostAliases: []
  resourcesPreset: "small"
  resources: {}
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  backoffLimit: 1
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  podTolerations: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  configuration: {}
  existingConfigmap: ""
  cleanupAfterFinished:
    enabled: false
    seconds: 600

postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    username: bn_keycloak
    password: ""
    database: bitnami_keycloak
    existingSecret: ""
  architecture: standalone
externalDatabase:
  host: ""
  port: 5432
  user: bn_keycloak
  database: bitnami_keycloak
  password: ""
  existingSecret: ""
  existingSecretHostKey: ""
  existingSecretPortKey: ""
  existingSecretUserKey: ""
  existingSecretDatabaseKey: ""
  existingSecretPasswordKey: ""
  annotations: {}

cache:
  enabled: true
  stackName: kubernetes
  stackFile: ""

logging:
  output: default
  level: INFO
